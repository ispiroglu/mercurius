// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: Event.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Mercurius_Publish_FullMethodName   = "/proto.Mercurius/Publish"
	Mercurius_Subscribe_FullMethodName = "/proto.Mercurius/Subscribe"
	Mercurius_Retry_FullMethodName     = "/proto.Mercurius/Retry"
)

// MercuriusClient is the client API for Mercurius service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MercuriusClient interface {
	Publish(ctx context.Context, in *Event, opts ...grpc.CallOption) (*ACK, error)
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (Mercurius_SubscribeClient, error)
	Retry(ctx context.Context, in *RetryRequest, opts ...grpc.CallOption) (*ACK, error)
}

type mercuriusClient struct {
	cc grpc.ClientConnInterface
}

func NewMercuriusClient(cc grpc.ClientConnInterface) MercuriusClient {
	return &mercuriusClient{cc}
}

func (c *mercuriusClient) Publish(ctx context.Context, in *Event, opts ...grpc.CallOption) (*ACK, error) {
	out := new(ACK)
	err := c.cc.Invoke(ctx, Mercurius_Publish_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mercuriusClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (Mercurius_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &Mercurius_ServiceDesc.Streams[0], Mercurius_Subscribe_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &mercuriusSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Mercurius_SubscribeClient interface {
	Recv() (*BulkEvent, error)
	grpc.ClientStream
}

type mercuriusSubscribeClient struct {
	grpc.ClientStream
}

func (x *mercuriusSubscribeClient) Recv() (*BulkEvent, error) {
	m := new(BulkEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mercuriusClient) Retry(ctx context.Context, in *RetryRequest, opts ...grpc.CallOption) (*ACK, error) {
	out := new(ACK)
	err := c.cc.Invoke(ctx, Mercurius_Retry_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MercuriusServer is the server API for Mercurius service.
// All implementations must embed UnimplementedMercuriusServer
// for forward compatibility
type MercuriusServer interface {
	Publish(context.Context, *Event) (*ACK, error)
	Subscribe(*SubscribeRequest, Mercurius_SubscribeServer) error
	Retry(context.Context, *RetryRequest) (*ACK, error)
	mustEmbedUnimplementedMercuriusServer()
}

// UnimplementedMercuriusServer must be embedded to have forward compatible implementations.
type UnimplementedMercuriusServer struct {
}

func (UnimplementedMercuriusServer) Publish(context.Context, *Event) (*ACK, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedMercuriusServer) Subscribe(*SubscribeRequest, Mercurius_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedMercuriusServer) Retry(context.Context, *RetryRequest) (*ACK, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Retry not implemented")
}
func (UnimplementedMercuriusServer) mustEmbedUnimplementedMercuriusServer() {}

// UnsafeMercuriusServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MercuriusServer will
// result in compilation errors.
type UnsafeMercuriusServer interface {
	mustEmbedUnimplementedMercuriusServer()
}

func RegisterMercuriusServer(s grpc.ServiceRegistrar, srv MercuriusServer) {
	s.RegisterService(&Mercurius_ServiceDesc, srv)
}

func _Mercurius_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MercuriusServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mercurius_Publish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MercuriusServer).Publish(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mercurius_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MercuriusServer).Subscribe(m, &mercuriusSubscribeServer{stream})
}

type Mercurius_SubscribeServer interface {
	Send(*BulkEvent) error
	grpc.ServerStream
}

type mercuriusSubscribeServer struct {
	grpc.ServerStream
}

func (x *mercuriusSubscribeServer) Send(m *BulkEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _Mercurius_Retry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MercuriusServer).Retry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mercurius_Retry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MercuriusServer).Retry(ctx, req.(*RetryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Mercurius_ServiceDesc is the grpc.ServiceDesc for Mercurius service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Mercurius_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Mercurius",
	HandlerType: (*MercuriusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _Mercurius_Publish_Handler,
		},
		{
			MethodName: "Retry",
			Handler:    _Mercurius_Retry_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _Mercurius_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "Event.proto",
}
